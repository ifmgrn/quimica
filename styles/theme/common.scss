/*
	Copyright (c) 2025 ifmgrn
	Licensed under the GNU AGPL-3.0 License.
	See LICENSE.txt for details.
*/

// Melhora os padrões do Pico (e adiciona classes utilitárias)

@use "tree-view";

html {
	/* "scrollbar-gutter: stable overlay" ainda não é amplamente suportado, então é melhor deixar a barra vertical sempre visível */
	overflow-y: scroll;
	overscroll-behavior-y: auto;
}

.overflow-auto {
	overflow: auto;
	overscroll-behavior: auto;
}

.hidden {
	opacity: 0 !important;
	visibility: hidden !important;
	transition:
		opacity var(--transition),
		visibility 0s linear var(--transition-duration) !important;
}

.center {
	display: block;
	width: fit-content;
	margin-right: auto;
	margin-left: auto;
}

// Remove o efeito padrão de hover do picocss para ser implementado só quando o dispositivo permite hover (não mobile)
/* stylelint-disable-next-line plugin/use-defensive-css */
button,
button:is(:hover, :active, :focus) {
	--background-color: var(--form-element-background-color);
	--color: var(--muted-color);
	--border-color: var(--primary-border);

	cursor: unset;
}

button:is(:active, :focus-visible) {
	--background-color: var(--primary-hover-background);
	--color: var(--color);
	--border-color: var(--primary-hover-border);
}

@media (hover: hover) {
	button:hover {
		--background-color: var(--primary-hover-background);
		--color: var(--color);
	}
}

button.active {
	--color: var(--color);
	--background-color: var(--primary-background);
}

[role="group"] {
	display: inline-flex;
	width: auto;
	flex-wrap: nowrap;
	justify-content: center;
	vertical-align: middle;
	border-radius: var(--border-radius);
	box-shadow: 0 3px 0 rgb(0 0 0 / 40%);
	overflow-x: auto;
	overscroll-behavior-x: contain;

	button {
		--form-element-spacing-vertical: 0.25rem;
		--form-element-spacing-horizontal: 0.75rem;

		border-bottom: 0;
	}

	> *,
	input:not([type="checkbox"], [type="radio"]),
	select {
		&:not(:first-child) {
			margin-left: 0;
			border-top-left-radius: 0;
			border-bottom-left-radius: 0;
		}

		&:not(:last-child) {
			border-top-right-radius: 0;
			border-bottom-right-radius: 0;
		}
	}

	button,
	input:not([type="checkbox"], [type="radio"]) {
		&:not(:first-child) {
			margin-left: calc(var(--border-width) * -1);
		}
	}
}

:is(input, textarea)::placeholder {
	color: var(--muted-color);
}

[type="search"]::-webkit-search-cancel-button {
	appearance: none;
}

th,
td {
	padding: calc(var(--spacing) / 2) calc(var(--spacing) * 0.75);
	white-space: break-spaces;
	transition: background-color var(--transition);
}

th {
	font-weight: calc(var(--font-weight) * 1.5);
}

td {
	font-size: 87.5%;
	line-height: calc(var(--line-height) / 1.2);
	border-top: var(--border-width) solid var(--table-border-color);
	border-bottom: 0;
}

table:is(.full-link-rows, .hover-effect) tr {
	/*
	Safari não suporta `position: relative` em elementos `<tr>`,
	mas essas duas propriedades podem ser usadas como uma alternativa.
	Fonte: https://mtsknn.fi/blog/relative-tr-in-safari/
    */
	clip-path: inset(0);
	transform: translate(0);
}

table {
	/* 
	Quando uma linha (<tr>) tem `position: relative` (ou algo com mesmo efeito),
	o Firefox não renderiza bordas com `border-collapse: collapse` definido, 
	então precisamos usar `border-collapse: separate`.
	*/
	border-collapse: separate;
	border-spacing: 0;
}

tr a {
	color: unset;
	text-decoration: none;
}

tr a::after {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	display: block;
	width: 100%;
	content: "";
}

li {
	margin-bottom: 0;
}

ul li {
	list-style: disc;
}

@media (hover: hover) {
	table.hover-effect tr:not(:first-child):hover::after {
		@include tree-view.hover-effect;
	}
}

/* "marker" sem animações é amplamente suportado */
/* stylelint-disable-next-line plugin/use-baseline */
li::marker {
	color: var(--primary-background);
}
